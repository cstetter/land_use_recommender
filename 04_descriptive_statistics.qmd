---
title: "Data descriptives"
format: html
---


```{r}
library(MetBrewer)
library(ggh4x)
```

```{r}
shapeBY <- sf::st_read("../dat/spatial_data/bayern_ex.shp")



EUmap <- sf::st_read("../dat/spatial_data/NUTS_RG_03M_2013_3857_LEVL_0.shp")
EUmap <- sf::st_transform(EUmap, sf::st_crs(shapeBY))
EUmap <- sf::st_crop(sf::st_make_valid(EUmap), 
                 xmin = 2500000, ymin = 4000000, 
                 xmax = 6000000, ymax = 7968908)
```

```{r map}
library(sf)
library(spData)
library(ggplot2)
library(cowplot)
```


```{r map}
ByCrop <- st_union(st_crop(EUmap, shapeBY))

p1 <- ggplot()+
 geom_sf(data = EUmap, fill = NA,
         size = 0.5)  +
 geom_sf(data = shapeBY, size = 0.2, alpha=0.1) +
 geom_sf(data = ByCrop, fill = NA, color="black", size=1) +
 scale_color_viridis_c() +
 annotate("rect", xmin = st_bbox(shapeBY)["xmin"], xmax = st_bbox(shapeBY)["xmax"], 
          ymin = st_bbox(shapeBY)["ymin"], ymax = st_bbox(shapeBY)["ymax"],
          colour = "black", fill = "transparent", size = 1) +
 geom_sf_text(
  data = EUmap[EUmap$NUTS_ID %in% c("DE", "ES", "FR", "IT", "NL", "PL", "SE", "UK"),],
  aes(label = NUTS_ID), size=3.5 ) +
 theme_void(base_size = 16) +
 theme(axis.text = element_blank())
```


```{r}
data_calc <- readRDS("../dat/choice_data/data_calc.rds")

#### Load shape data ####
shape <- sf::st_read("../dat/spatial_data/plz-3stellig.shp")

## subset only relevant zip codes
shape <- shape[startsWith(shape$plz, "63") | 
                startsWith(shape$plz, "8") | 
                startsWith(shape$plz, "9"),]

shape5 <- sf::st_read("../dat/spatial_data/plz-gebiete.shp")
shape5 <- shape5[ which(shape5$plz %in% 
                          data_calc$location[which(nchar(data_calc$location)==5)]),]

shape5$note <- NULL
shapeAll <- rbind(shape, shape5)

shapeAll <- shapeAll %>% 
 group_by(plz) %>%
 summarise(geometry = sf::st_union(geometry)) %>%
 ungroup()

a <- st_centroid(shapeAll) %>% 
 rename(zip=plz)

aa <- left_join(data_calc, a, by="zip")
aa <- sf::st_transform(st_as_sf(aa), sf::st_crs(shapeBY))
aa <- aa[st_covers(shapeBY, aa)[[1]],]

p2 <-ggplot() +
 geom_sf(data = st_crop(EUmap, shapeBY), color = gray(.5), alpha=0.2, fill="white") +
 geom_sf(data = shapeBY, color = gray(.5), alpha=0.2) +
 geom_sf(data = st_jitter(aa$geometry, factor = .02) , color="black", alpha = .5,  size=1.3)+
 theme_void()
 # theme(panel.grid = element_blank(), 
 #       axis.title = element_blank(),
 #       axis.text = element_blank(),
 #       axis.ticks = element_blank(),
 #       panel.background = element_blank()) 
```


```{r map}
# map
gg_inset_map1 = cowplot::ggdraw() +
    coord_equal(xlim = c(0, 32), ylim = c(0, 20), expand = FALSE) +
    annotation_custom(ggplotGrob(p1), xmin = 0, xmax = 20, ymin = 0, ymax =20) +
    annotation_custom(ggplotGrob(p2), xmin = 19, xmax = 32, ymin = 3, ymax = 20) +
    geom_segment(aes(x = 11.5, xend = 19.95, y = 7.4, yend = 17.4), color = "black", size = .6) +
    geom_segment(aes(x = 11.5, xend = 19.95, y = 7.4, yend = 5.8), color = "black", size = .6)

ggsave(filename = paste0("../img/bavaria_map.png"), 
       plot = gg_inset_map1, dpi="print",
       width = 14, height = 6)
```

```{r}
# Define custom labels for the y facets
custom_labels_y <- c(
  "1_3" = "Short-term\nweather history",
  "4_10" = "Long-term\nweather history"
)

# Define custom labels for the x facets
custom_labels_x <- c(
  "temp" = "Temperature",
  "rain" = "Precipitation",
  "hd" = "Hot days",
  "dd" = "Dry days",
  "r20" = "Heavy rain days"
)

# Load original processed weather data based on zip codes
weather_stetter_sauer <-  readRDS("../dat/choice_data/fd_weather_plz.rds") 

colnames(weather_stetter_sauer) <- str_replace(
 colnames(weather_stetter_sauer), "ann_", "") 

old_names <- c("rain", "temp", "dd", "r20", "hd")

weather_stetter_sauer <- cbind(
 ## 1-3 lags
 weather_stetter_sauer %>% filter(year>=2017 & year<=2019) %>%
  aggregate(., by = list(.$plz), FUN = mean) %>% 
  dplyr::select(Group.1, rain:hd) %>%
  rename_at(vars(colnames(.)), ~ c("zip", paste0(old_names, "_1_3" ))),
 
 ## 4-10 lag
 weather_stetter_sauer %>% filter(year>=2010 & year<=2016) %>%
  aggregate(., by = list(.$plz), FUN = mean) %>% 
  dplyr::select(rain:hd) %>%
  rename_at(vars(colnames(.)), ~ c(paste0(old_names, "_4_10" )))
) 

summary_data  <- data_calc %>% 
 select(zip) %>%
 left_join(weather_stetter_sauer, by="zip") %>%  
 pivot_longer(2:11) %>% 
 mutate(a=ifelse(startsWith(name, "hd"), "hd", NA),
        a=ifelse(startsWith(name, "dd"), "dd", a),
        a=ifelse(startsWith(name, "r20"), "r20", a),
        a=ifelse(startsWith(name, "rain"), "rain", a),
        a=ifelse(startsWith(name, "temp"), "temp", a))  

summary_data$name <- ifelse(endsWith(summary_data$name, "1_3"), 
                            "Short-run", "Long-run")

# Define the desired order of facets
facet_order <- c("temp", "rain", "hd", "dd", "r20")

# Reorder the levels of the `name` variable
summary_data$a <- factor(summary_data$a, levels = facet_order)

summ <- summary_data %>%
  group_by(a, name) %>%
  summarise(mean = mean(value), sd = sd(value), median=median(value))

summ$y <- c(16, 16, 1100,1100,42,42,182,182,15,15)
 
ggSummaryBox <-  ggplot(summary_data) +
 geom_boxplot(aes(name, value)) + 
 ggforce::facet_row(vars(a), scales = 'free', space = 'free', 
                    labeller = labeller(a = as_labeller(custom_labels_x))) + 
 theme_classic(base_size=16) +
 geom_text(data = summ, aes(x = name, y = y, 
                            label = paste("Mean:", round(mean, 2), 
                                          "\nSD:", round(sd, 2)))) +
 theme(axis.title = element_blank())
```


```{r}
# Load original processed weather data based on zip codes
res_stetter_sauer <-  readRDS("../dat/choice_data/res_cor_13_410.rds") 

perc_freq <- c(res_stetter_sauer$freq/sum(res_stetter_sauer$freq))

df_choice_freq <- data.frame(lu = c("SQ", "AC", "SRC"),
                     values = c(perc_freq["3"], perc_freq["2"], perc_freq["1"]))


# Define the lu_col variable with color values
lu_col <- met.brewer("Gauguin", 3, type = c("discrete"))[1:3]

# Create the ggplot object and plot the bar chart
ggFreq <- ggplot(df_choice_freq) +
 geom_col(aes(x = factor(lu, levels = c("SQ", "AC", "SRC"),
                         labels = c("Crop rotation ",
                                    "Agroforestry",
                                    "Short rotation\ncoppice")),
               y = values, fill = lu),
           position = "dodge",  color = "black") +
  scale_fill_manual("Predicted optimal land use type",
                    values = lu_col,
                    breaks = c("AC", "SQ", "SRC"),
                    labels = c("Agroforestry",
                               "Crop rotation ",
                               "Short rotation\ncoppice")) +
  theme_classic(base_size = 18) +
 ylab("Proportion") +
 theme(legend.position = "none",
       axis.title.x = element_blank())
```


```{r}
library(patchwork)

layout <- "
AAAABB
AAAABB
CCCCCC
CCCCCC
"

ggTrainingData <- gg_inset_map1 + ggFreq + ggSummaryBox + 
 plot_layout(design = layout) +
 plot_annotation(tag_levels = 'A')


ggsave(filename = paste0("../img/ggTrainingData.png"), 
       plot = ggTrainingData, dpi="print",
       width = 14, height = 11)
```

# Prediction data empirical
```{r}
df_dwd_5km <- readRDS("../dat/data_processed/df_dwd5km.rds")


library(forcats)
# Modify the facet_grid() call in the ggplot code
gglist <- lapply(df_dwd_5km_list, function(i) {
  ggplot(i) +
    geom_sf(aes(fill = value), col = 0) +
    facet_grid(column2 ~ column1, labeller = labeller(column1 = as_labeller(custom_labels_x), column2 = as_labeller(custom_labels_y))) +
    theme_classic(base_size = 16) +
    theme(
      axis.line = element_blank(),
      axis.text.x = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks = element_blank(),
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      legend.position = "bottom",
      legend.title = element_blank(),  # Remove legend titles
      legend.key.height = unit(0.2, "cm"),
      legend.key.width = unit(0.8, "cm")# Adjust the width of legend bars
    )
})

gglist2 <- lapply(gglist[c(1,2,4,5)], function(i)
 i +  theme(strip.background.y = element_blank(),
            strip.text.y = element_blank()))

ggPredictionData5km <- gglist2[[4]] + scale_fill_distiller(palette = "Reds", direction=1) |
 gglist2[[3]] + scale_fill_distiller(palette = "Blues", direction=1) | 
 gglist2[[2]] + scale_fill_distiller(palette = "Oranges", direction=1) | 
 gglist2[[1]] + scale_fill_distiller(palette = "Greys", direction=1) |
 gglist[[3]] + scale_fill_distiller(palette = "Purples", direction=1)

ggsave(filename = paste0("../img/ggPredData5km.png"), 
       plot = ggPredictionData5km, dpi="print",
       width = 10, height =5)
```


```{r}
df_proj45 <- readRDS("../dat/data_projections_cleaned/cleaned_proj/df_projection_rcp45_ICHEC-EC-EARTH_r12i1p1_SMHI-RCA4.rds")

df_proj85 <- readRDS("../dat/data_projections_cleaned/cleaned_proj/df_projection_rcp85_ICHEC-EC-EARTH_r12i1p1_SMHI-RCA4.rds")


df45 <- df_proj45$df_proj %>%
 pivot_longer(1:40) %>%
 mutate(column1=str_extract(name, "^[^_]+"),
        column2=str_extract(name, "(?<=_)[^_]+(?=_[^_]+_)"),
        column3=str_sub(name, start = -4),
        rcp = "RCP 4.5") %>% 
 filter(column3!=2040)


df85 <- df_proj85$df_proj %>%
 pivot_longer(1:40) %>%
 mutate(column1=str_extract(name, "^[^_]+"),
        column2=str_extract(name, "(?<=_)[^_]+(?=_[^_]+_)"),
        column3=str_sub(name, start = -4),
        rcp = "RCP 8.5") %>% 
 filter(column3!=2040)



a <- rbind(df45, df85) %>% 
 group_split(column1)


# Define custom labels for the y facets
custom_labels_col2 <- c(
  "1" = "Short-term\nweather history",
  "4" = "Long-term\nweather history"
)

# Define custom labels for the x facets
custom_labels_col1 <- c(
  "temp" = "Temperature",
  "rain" = "Precipitation",
  "hd" = "Hot days",
  "dd" = "Dry days",
  "r20" = "Heavy rain days"
)


gglist <-lapply(a, function(i) 
 ggplot(i) +
 geom_sf(aes(fill=value), col = 0) + 
 facet_nested(column1+column2 ~ rcp + column3, 
              labeller = labeller(column1 = as_labeller(custom_labels_col1), 
                                  column2 = as_labeller(custom_labels_col2))) + 
 theme_classic(base_size=16) +
 theme(axis.line=element_blank(),
      axis.text.x=element_blank(),
      axis.text.y=element_blank(),
      axis.ticks=element_blank(),
      axis.title.x=element_blank(),
      axis.title.y=element_blank(),
      legend.position = "right",
      legend.title = element_blank(),  # Remove legend titles
      legend.key.height = unit(0.8, "cm"),
      legend.key.width = unit(0.2, "cm")# Adjust the width of legend bars)
 )
)

gglist2 <- lapply(gglist[c(1:4)], function(i)
 i +  theme(strip.background.x = element_blank(),
            strip.text.x = element_blank()))

ggProjectionData <- (gglist[[5]] + scale_fill_distiller(palette = "Reds", direction=1)) / 
 (gglist2[[4]] + scale_fill_distiller(palette = "Blues", direction=1)) / 
 (gglist2[[2]] + scale_fill_distiller(palette = "Oranges", direction=1)) / 
 (gglist2[[1]] + scale_fill_distiller(palette = "Greys", direction=1)) / 
 (gglist2[[3]] + scale_fill_distiller(palette = "Purples", direction=1)) 

ggsave(filename = paste0("../img/ggProjData.png"), 
       plot = ggProjectionData, dpi="print",
       width = 11, height =16)
```

